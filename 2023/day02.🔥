# https://adventofcode.com/2023/day/2
#
# --- Day 2: Cube Conundrum ---
#
# You're launched high into the atmosphere! The apex of your trajectory just
# barely reaches the surface of a large island floating in the sky. You gently
# land in a fluffy pile of leaves. It's quite cold, but you don't see much snow.
# An Elf runs over to greet you.
#
# The Elf explains that you've arrived at Snow Island and apologizes for the
# lack of snow. He'll be happy to explain the situation, but it's a bit of a
# walk, so you have some time. They don't get many visitors up here; would you
# like to play a game in the meantime?
#
# As you walk, the Elf shows you a small bag and some cubes which are either
# red, green, or blue. Each time you play this game, he will hide a secret
# number of cubes of each color in the bag, and your goal is to figure out
# information about the number of cubes.
#
# To get information, once a bag has been loaded with cubes, the Elf will reach
# into the bag, grab a handful of random cubes, show them to you, and then put
# them back in the bag. He'll do this a few times per game.
#
# You play several games and record the information from each game (your puzzle
# input). Each game is listed with its ID number (like the 11 in Game 11: ...)
# followed by a semicolon-separated list of subsets of cubes that were revealed
# from the bag (like 3 red, 5 green, 4 blue).
#
# For example, the record of a few games might look like this:
#
# ```
# Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
# Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
# Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
# Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
# Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
# ```
#
# In game 1, three sets of cubes are revealed from the bag (and then put back
# again). The first set is 3 blue cubes and 4 red cubes; the second set is 1 red
# cube, 2 green cubes, and 6 blue cubes; the third set is only 2 green cubes.
#
# The Elf would first like to know which games would have been possible if the
# bag contained only 12 red cubes, 13 green cubes, and 14 blue cubes?
#
# In the example above, games 1, 2, and 5 would have been possible if the bag
# had been loaded with that configuration. However, game 3 would have been
# impossible because at one point the Elf showed you 20 red cubes at once;
# similarly, game 4 would also have been impossible because the Elf showed you
# 15 blue cubes at once. If you add up the IDs of the games that would have been
# possible, you get 8.
#
# Determine which games would have been possible if the bag had been loaded with
# only 12 red cubes, 13 green cubes, and 14 blue cubes. What is the sum of the
# IDs of those games?


from collections.vector import DynamicVector


fn main() raises:
    let lines = read_lines("./2023/day02.txt")
    var count = 0
    for i in range(len(lines)):
        let line = lines[i]
        if line == "":
            continue
        count += id_or_0(line, red_limit=12, blue_limit=13, green_limit=14)
    print(count)


fn id_or_0(
    line: String, red_limit: Int, blue_limit: Int, green_limit: Int
) raises -> Int:
    """Returns the game ID if the cube subsets are possible, otherwise 0.

    line ≊ "Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green".
    """
    let colon_separated = line.split(": ")
    let game_label = colon_separated[0]
    let subsets = colon_separated[1]
    if not subsets_are_possible(subsets, red_limit, blue_limit, green_limit):
        return 0
    return parse_game_id(game_label)


fn subsets_are_possible(
    subsets: String, red_limit: Int, blue_limit: Int, green_limit: Int
) raises -> Bool:
    """Returns whether the cube subsets are possible.

    subsets ≊ "3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green".
    """
    let semicolon_separated = subsets.split("; ")
    for i in range(len(semicolon_separated)):
        let subset = semicolon_separated[i]
        if not subset_is_possible(subset, red_limit, blue_limit, green_limit):
            return False
    return True


fn subset_is_possible(
    subset: String, red_limit: Int, blue_limit: Int, green_limit: Int
) raises -> Bool:
    """Returns whether the cube subset it possible.

    subset ≊ "3 blue, 4 red".
    """
    let comma_separated = subset.split(", ")
    for i in range(len(comma_separated)):
        let cube_label = comma_separated[i]
        if not cube_count_is_possible(cube_label, red_limit, blue_limit, green_limit):
            return False
    return True


fn cube_count_is_possible(
    cube_label: String, red_limit: Int, blue_limit: Int, green_limit: Int
) raises -> Bool:
    """Returns whether the cube count is possible.

    cube_label ≊ "3 blue".
    """
    let space_separated = cube_label.split(" ")
    let raw_count = space_separated[0]
    let color = space_separated[1]
    let count = atol(raw_count)
    if color == "red" and count > 12:
        return False
    if color == "blue" and count > 13:
        return False
    if color == "green" and count > 14:
        return False
    return True


fn parse_game_id(game_label: String) raises -> Int:
    let space_separated = game_label.split(" ")
    let raw_game_id = space_separated[1]
    let game_id = atol(raw_game_id)
    return game_id


fn read_lines(path: String) raises -> DynamicVector[String]:
    with open(path, "r") as f:
        let content = f.read()
        let lines = content.split("\n")
        return lines
